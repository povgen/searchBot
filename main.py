import datetime
import logging
import os

from aiogram import types
from aiogram.dispatcher import filters, FSMContext
from aiogram.utils import executor

from keyboards import default_keyboard, order_keyboard
from post_controller import show_posts, usersData, show_post, post_count_on_page
from settings import dp, bot, BotStates, orders
from translator import translate_to_sr
from user import User

os.makedirs('logs', exist_ok=True)
logging.basicConfig(level=logging.INFO, filename="logs/log.log")


@dp.message_handler(commands=['start'])
async def send_welcome(message):
    user = User(message['from'].id)
    user.user_info = message["from"]

    await bot.send_message(message.chat.id,
                           f'–ü—Ä–∏–≤–µ—Ç, {message["from"].first_name}, —è –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å',
                           reply_markup=default_keyboard)


@dp.message_handler(commands=['feedback'])
async def get_feedback(message):
    await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤')
    await BotStates.feedback.set()


@dp.message_handler(state=BotStates.feedback)
async def save_feedback(message, state: FSMContext):
    username = message['from'].username
    name = message['from'].first_name
    now = datetime.datetime.now()
    now = now.strftime("%d-%m-%Y %H:%M")

    feedback = f'{now} {name} (@{username}): \n\t {message.text} \n\n'

    with open('logs/feedback.txt', 'a', encoding="utf-8") as f:
        f.write(feedback)

    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤')
    await state.finish()


@dp.message_handler(commands=['donate'])
async def get_donate_info(message):
    await bot.send_message(message.chat.id, """
    –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:
    - –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
    - –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥—Ä—É–∑—å—è–º
    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
    """)


@dp.message_handler(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def prev_posts(message):
    user = User(message['from'].id)

    if user.offset <= 0:
        user.offset = 30
        if user.request_params['page'] > 1:
            user.request_params['page'] -= 1
    else:
        user.offset -= post_count_on_page

    await show_posts(message)


@dp.message_handler(text='‚û°Ô∏è Ô∏è–î–∞–ª—å—à–µ')
async def next_posts(message):
    user = User(message['from'].id)

    if user.offset >= 25:
        user.offset = 0
        user.request_params['page'] += 1
        await bot.send_message(message.chat.id, '–ü–æ–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
    else:
        user.offset += post_count_on_page

    await show_posts(message)


@dp.message_handler(filters.Text(startswith='üì∂'))
async def next_posts(message):
    user = User(message['from'].id)
    if message.text == 'üì∂ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞':
        keys = [key for key, value in orders.items() if value == user.request_params['order']]
        await bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, —Ç–µ–∫—É—â–∞—è: {keys[0]}',
                               reply_markup=order_keyboard)
    elif message.text in orders:
        user.request_params['order'] = orders[message.text]
        await bot.send_message(message.chat.id, '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É...',
                               reply_markup=default_keyboard)
        await show_posts(message)
    else:
        await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                               reply_markup=order_keyboard)


@dp.message_handler(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º')
async def back_to_posts(message):
    await show_posts(message)
    await bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É...', reply_markup=default_keyboard)


@dp.message_handler()
async def search(message):
    keywords = translate_to_sr(message.text.lower())
    await bot.send_message(message.chat.id, f'–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{keywords}"')
    user = User(message['from'].id)
    user.request_params['keywords'] = keywords
    user.save()

    await show_posts(message)


@dp.callback_query_handler()
async def handler(callback_query: types.CallbackQuery):
    await show_post(callback_query)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
